name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-security.txt
    
    - name: Run Safety scan
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json --desc || true
        pip-audit --desc
    
    - name: Generate SBOM
      run: |
        cyclonedx-py requirements -o sbom.json
    
    - name: Upload scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          safety-report.json
          pip-audit-report.json
          sbom.json

  code-scan:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] semgrep
    
    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -ll
    
    - name: Run Semgrep
      run: |
        semgrep --config=auto src/ --json --output=semgrep-report.json || true
        semgrep --config=auto src/ --verbose
    
    - name: Upload scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sast-scan-results
        path: |
          bandit-report.json
          semgrep-report.json

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t tkr-news-gather:latest .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'tkr-news-gather:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
        pip install -r requirements.txt
    
    - name: Generate license report
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=markdown --output-file=licenses.md
        echo "## License Summary" >> $GITHUB_STEP_SUMMARY
        cat licenses.md >> $GITHUB_STEP_SUMMARY
    
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: |
          licenses.json
          licenses.md